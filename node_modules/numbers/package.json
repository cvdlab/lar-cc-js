{
  "author": {
    "name": "Steve Kaliski",
    "email": "sjkaliski@gmail.com",
    "url": "https://github.com/sjkaliski"
  },
  "name": "numbers",
  "description": "Advanced Mathematics Library for JavaScript",
  "version": "0.4.0",
  "homepage": "https://github.com/sjkaliski/numbers.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/sjkaliski/numbers.js"
  },
  "contributors": [
    {
      "name": "David Byrd",
      "url": "https://github.com/davidbyrd11"
    },
    {
      "name": "Ethan Resnick",
      "url": "https://github.comc/ethanresnick"
    }
  ],
  "engines": {
    "node": ">= v0.6.0"
  },
  "main": "index",
  "keywords": [
    "math",
    "mathematics",
    "numbers",
    "statistics"
  ],
  "devDependencies": {
    "mocha": "~1.5.0",
    "browserify": "~1.16.6",
    "uglify-js": "~2.2.2",
    "jshint": "~0.9.1"
  },
  "scripts": {
    "test": "make test",
    "build": "make build"
  },
  "readme": "# numbers.js [![Build Status](https://travis-ci.org/sjkaliski/numbers.js.png)](https://travis-ci.org/sjkaliski/numbers.js)\nNumbers - an advanced mathematics toolkit for JavaScript and Node.js\ndeveloped by Steve Kaliski, [@sjkaliski](http://twitter.com/sjkaliski)\n\n\n## Description\n\nNumbers provides a comprehensive set of mathematical tools that currently are not offered in JavaScript.  These tools include:\n\n* Basic calculations\n* Calculus\n* Matrix Operations\n* Prime Numbers\n* Statistics\n* More...\n\nA few things to note before using: JavaScript, like many languages, does not necessarily manage floating points as well as we'd all like it to. For example, if adding decimals, the addition tool won't return the exact value. This is an unfortunate error. Precautions have been made to account for this. After including numbers, you can set an error bound. Anything in this will be considered an \"acceptable outcome.\"\n\nThe primary uses cases are client side operations which the DOM will recognize (e.g. 1.1px == 1px). It can be used for data analysis, calculations, etc. on the server as well.\n\n## How to use\n\nNumbers is pretty straightforward to use.\n\nWith node, simply require it:\n```javascript\nvar numbers = require('numbers');\n```\n\nFor example, if we wanted to estimate the integral of sin(x) from -2 to 4, we could:\n\nUse riemann integrals (with 200 subdivisions)\n```javascript\nvar numbers = require('numbers');\n\nnumbers.calculus.riemann(Math.sin, -2, 4, 200);\n```\n\nOr use adaptive simpson quadrature (with epsilon .0001)\n\n```javascript\nnumbers.calculus.adaptiveSimpson(Math.sin, -2, 4, .0001);\n```\n\nUser-defined functions can be used too:\n\n```\nvar myFunc = function(x) {\n  return 2*Math.pow(x,2) + 1;\n}\n\nnumbers.calculus.riemann(myFunc, -2, 4, 200);\nnumbers.calculus.adaptiveSimpson(myFunc, -2, 4, .0001);\n```\n\nNow say we wanted to run some matrix calculations:\n\nWe can add two matrices\n\n```javascript\nvar array1 = [0, 1, 2];\nvar array2 = [3, 4, 5];\n\nnumbers.matrix.addition(array1, array2);\n```\n\nWe can transpose a matrix\n\n```javascript\nnumbers.matrix.transpose(array);\n```\n\nNumbers also includes some basic prime number analysis.  We can check if a number is prime:\n\n```javascript\n//basic check\nnumbers.prime.simple(number);\n\n//elliptic analysis (good for huge numbers)\nnumbers.prime.elliptic(number);\n```\n\nThe statistics tools include mean, median, mode, standard deviation, random sample generator, correlation, confidence intervals, t-test, chi-square, and more.\n\n```javascript\nnumbers.statistic.mean(array);\nnumbers.statistic.median(array);\nnumbers.statistic.mode(array);\nnumbers.statistic.standardDev(array);\nnumbers.statistic.randomSample(lower, upper, n);\nnumbers.statistic.correlation(array1, array2);\n```\nFor further documentation, check out our [JSDoc](http://jsdoc.info/sjkaliski/numbers.js/)\n\n## Test\n\nTo execute, run:\n\n```\nnpm test\n```\n\n## Build\n\nTo update the public JavaScript, run\n\n```\nmake build\n```\n\nThis will compile the entire library into a single file accessible at public/numbers.js. It will also minify the file into public/numbers.min.js.\n\n## Core Team\n* Steve Kaliski - [@sjkaliski](http://twitter.com/sjkaliski)\n* David Byrd - [@davidbyrd11](http://twitter.com/davidbyrd11)\n* Ethan Resnick - [@studip101](http://twitter.com/studip101)\n\n## Contributors\nIn no particular order:\n* [Ethan aka `altercation`](https://github.com/altercation)\n* [Hrishikesh Paranjape aka `hrishikeshparanjape`](https://github.com/hrishikeshparanjape)\n* [Greg Leppert aka `leppert`](https://github.com/leppert)\n* [Lars-Magnus Skog aka `ralphtheninja`](https://github.com/ralphtheninja)\n* [Tim Wood aka `codearachnid`](https://github.com/codearachnid)\n* [Miles McCrocklin aka `milroc`](https://github.com/milroc)\n* [Nate Kohari aka `nkohari`](https://github.com/nkohari)\n* [Eric LaForce aka `elaforc`](https://github.com/elaforc)\n* [Kartik Talwar aka `KartikTalwar`](https://github.com/KartikTalwar)\n* [btmills aka `btmills`](https://github.com/btmills)\n* [swair shah aka `swairshah`](https://github.com/swairshah)\n* [Jason Hutchinson aka `Zikes`](https://github.com/Zikes)\n* [Philip I. Thomas aka `philipithomas`](https://github.com/philipithomas)\n* [Brandon Benvie aka `Benvie`](https://github.com/Benvie)\n* [Larry Battle aka `LarryBattle`](https://github.com/LarryBattle)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sjkaliski/numbers.js/issues"
  },
  "_id": "numbers@0.4.0",
  "dist": {
    "shasum": "e2f36979392a9a7a7e493c47a3754f5239d2bece"
  },
  "_from": "numbers@",
  "_resolved": "https://registry.npmjs.org/numbers/-/numbers-0.4.0.tgz"
}
